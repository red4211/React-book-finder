{"version":3,"sources":["InputField.js","BooksList.js","App.js","serviceWorker.js","index.js"],"names":["InputField","react_default","a","createElement","className","type","onKeyUp","this","props","inputBook","onClick","prop2","Component","BooksList","list","map","current","index","author","image","authors","authorString","forEach","curItem","imageLinks","src","smallThumbnail","key","title","publishedDate","href","canonicalVolumeLink","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","results","searchQuery","bind","assertThisInitialized","bookRequest","e","setState","target","value","_this2","changedSearch","replace","axios","get","then","res","data","items","result","volumeInfo","src_InputField","src_BooksList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAaeA,mLAVX,OACIC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,eACCH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOD,UAAU,YAAYE,QAASC,KAAKC,MAAMC,YAC/DR,EAAAC,EAAAC,cAAA,UAAQO,QAASH,KAAKC,MAAMG,OAA5B,kBANiBC,aCuCVC,mLArCX,IAAIC,EAAOP,KAAKC,MAAMM,KAAKC,IAAI,SAACC,EAAQC,GACtC,IAAIC,EACAC,EAEJ,GAAGH,EAAQI,QAAQ,CACnB,IAAIC,EAAa,GACjBL,EAAQI,QAAQE,QAAQ,SAACC,EAASN,GAE9BI,GADQ,GAAPJ,EACaM,EAEC,KAAKA,IAItBL,EAASjB,EAAAC,EAAAC,cAAA,oBAAYkB,GAQvB,OAJEF,EADCH,EAAQQ,WACDvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKT,EAAQQ,WAAWE,iBAE7BzB,EAAAC,EAAAC,cAAA,OAAKsB,IAAI,KAEZxB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKV,GACbE,EACDlB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAUY,EAAQY,MAA/B,KACCV,EACDjB,EAAAC,EAAAC,cAAA,uBAAea,EAAQa,cAAvB,KACA5B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAG2B,KAAMd,EAAQe,qBAAjB,YAIP,OACI9B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAaU,EAA3B,YAlCgBF,aC0CToB,qBApCb,SAAAA,EAAYxB,GAAM,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,KAAMC,KACD+B,MAAQ,CAACC,QAAS,GAAIC,YAAa,IAExCR,EAAKxB,UAAYwB,EAAKxB,UAAUiC,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IACjBA,EAAKW,YAAcX,EAAKW,YAAYF,KAAjBR,OAAAS,EAAA,EAAAT,CAAAD,IALHA,yEAQRY,GACRtC,KAAKuC,SAAS,CAACL,YAAaI,EAAEE,OAAOC,8CAG1B,IAAAC,EAAA1C,KAEP2C,EAAgB3C,KAAKgC,MAAME,YAAYU,QAAQ,MAAO,KACzDC,IAAMC,IAAI,iDAAmDH,GAC3DI,KAAK,SAAAC,GACJ,GAAGA,EAAIC,KAAKC,MAAM,CAChB,IAAIC,EAASH,EAAIC,KAAKC,MAAM1C,IAAI,SAASC,EAAQC,GACjD,OAAOD,EAAQ2C,aAEjBV,EAAKH,SAAS,CAACN,QAASkB,wCAM5B,OACAzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyD,EAAD,CAAYnD,UAAWF,KAAKE,UAAWE,MAAOJ,KAAKqC,cACnD3C,EAAAC,EAAAC,cAAC0D,EAAD,CAAW/C,KAAMP,KAAKgC,MAAMC,kBA/BhB5B,cCMEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.7506cc9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass InputField extends Component{\r\n  render(){\r\n    return(\r\n        <div>\r\n        \t<p className=\"title\">Find a book</p>\r\n          <input type='text' className='inp-field' onKeyUp={this.props.inputBook} />\r\n        <button onClick={this.props.prop2} >Search</button>\r\n        </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default InputField;","import React, { Component } from 'react';\r\nclass BooksList extends Component{\r\n  render(){\r\n    var list = this.props.list.map((current,index)=>{\r\n      let author;\r\n      let image;\r\n\r\n      if(current.authors){\r\n      let authorString=\"\" ;\r\n      current.authors.forEach((curItem, index)=>{\r\n        if(index==0){\r\n          authorString+=curItem;\r\n        }else{\r\n          authorString+=(\", \"+curItem);\r\n        }\r\n      });\r\n\r\n        author = <p>Author: {authorString}</p>\r\n      }\r\n\r\n      if(current.imageLinks){\r\n        image = <img src={current.imageLinks.smallThumbnail} />\r\n      }else{\r\n        image = <img src=\"\" />\r\n      }\r\n      return <li key={index}>\r\n        {image}\r\n        <p className=\"title\" >{current.title} </p>\r\n        {author}\r\n        <p>Published: {current.publishedDate} </p>\r\n        <p><a href={current.canonicalVolumeLink} >link</a></p>\r\n      </li>\r\n    });\r\n\r\n    return(\r\n        <ul className=\"bookList\" >{list} </ul>\r\n      )\r\n  }\r\n}\r\n\r\nexport default BooksList;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport InputField from './InputField.js';\nimport BooksList from './BooksList.js';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {results: [], searchQuery: ''};\n\n    this.inputBook = this.inputBook.bind(this);\n    this.bookRequest = this.bookRequest.bind(this);\n  }\n\n  inputBook(e){\n    this.setState({searchQuery: e.target.value});\n  }\n\n  bookRequest(){\n    //change spaces to +\n    var changedSearch = this.state.searchQuery.replace(/\\s/g, \"+\");\n     axios.get('https://www.googleapis.com/books/v1/volumes?q=' + changedSearch)\n      .then(res => {\n        if(res.data.items){\n          var result = res.data.items.map(function(current,index){\n          return current.volumeInfo;\n        })\n        this.setState({results: result});\n        } \n      })\n  }\n\n  render(){\n    return (\n    <div className=\"App\">\n      <InputField inputBook={this.inputBook} prop2={this.bookRequest} />\n      <BooksList list={this.state.results} />\n    </div>\n  );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}